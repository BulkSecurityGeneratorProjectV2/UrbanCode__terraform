#!/bin/sh

# == BEGIN INSTALLER MODIFICATIONS ===============================================

JAVA_OPTS=""
#JAVA_DEBUG_OPTS="@JAVA_DEBUG_OPTS@"
#JAVA_HOME="@JAVA_HOME@"
#javacmd="$JAVA_HOME/bin/java"
javacmd="java"

# == END INSTALLER MODIFICATIONS =================================================

INPUT_FILE=$2
CREDS=$3

create_class=org.urbancode.terraform.main.Main
destroy_class=org.urbancode.terraform.main.Main

# set TERRAFORM_HOME
SHELL_NAME=$0
SHELL_PATH=`dirname ${SHELL_NAME}`

if [ "." = "$SHELL_PATH" ]
then
  SHELL_PATH=`pwd`
fi

TERRAFORM_HOME=`dirname $SHELL_PATH`
echo "TERRAFORM_HOME=$TERRAFORM_HOME"
jarfile="$TERRAFORM_HOME/dist"

export JAVA_HOME
export TERRAFORM_HOME
export INPUT_FILE
export CREDS

# -- Create ---------------------------------------------------------------------
CLASSPATH=""
LIB=$TERRAFORM_HOME/lib
if [ ! -d $LIB ]; then
  CURRENTDIR=`pwd`
  cd $TERRAFORM_HOME
  mvn dependency:build-classpath -Dmdep.outputFile=$TERRAFORM_HOME/bin/classpath
  cd $CURRENTDIR
  CLASSPATH=`cat $TERRAFORM_HOME/bin/classpath`
else 
    JARS=`find $LIB -name "*.jar"`
    for JAR in $JARS
    do
      if [ -z $CLASSPATH ]; then
        CLASSPATH=$JAR
      else 
        CLASSPATH=$CLASSPATH:$JAR
      fi
    done
fi

MTARGET=$TERRAFORM_HOME/target

nTFJARS=`ls -1 $MTARGET | grep terraform | wc -l`
if [ $nTFJARS -gt 1 ]; then
    echo "\t\tWARNING\n\t**Multiple terraform jars found!**\n\t**/target should include only one terraform jar**\n"
    exit 1
fi


# adds all terraform jars - not a good idea
TFJAR=`find $MTARGET -name "terraform*.jar"`

# tack on the terraform jar since we have a : at the end already
CP="$CLASSPATH:$TFJAR:$TERRAFORM_HOME/conf"

FNCT=$1

PROPS=""

if [ $# -lt 3 ]; then
    echo "\t\tWARNING\n\t**Not Enough Arguments found!**\n"
    FNCT="BAD"
else 
    shift 3
    for ARG in $@; do
      PROPS="$PROPS $ARG" 
    done
fi 

echo "Properties: $PROPS\n" 

if [ "$FNCT" = "create" ] ; then
  command_line="\"$javacmd\" $JAVA_OPTS 
    -cp \"$CP\" \
    $create_class create \"$INPUT_FILE\" \"$CREDS\" $PROPS"
#    $create_class create \"$INPUT_FILE\" \"$CREDS\" $PROPS >\"$TERRAFORM_HOME/bin/stdout\" 2>&1 &"
  echo $command_line
  eval $command_line
# -- Destroy ----------------------------------------------------------------------

elif [ "$FNCT" = "destroy" ] ; then

#  shift
#  FORCE=0
  command_line="\"$javacmd\" $JAVA_OPTS 
    -cp \"$CP\" \
    $destroy_class destroy \"$INPUT_FILE\" \"$CREDS\""
#    $destroy_class destroy \"$INPUT_FILE\" \"$CREDS\" >\"$TERRAFORM_HOME/bin/stdout\" 2>&1 &"
  echo $command_line
  eval $command_line
  if [ "$?" -eq 0 ]
  then 
    rm $INPUT_FILE
  fi
# -- Usage ---------------------------------------------------------------------

else
#	Also, create -debug|destroy -debug to instruct java to listen on port 10000
#	for remote JPDA Debugger connections.
  echo "Usage: terraform {create|destroy} {input-file} {credentials-file} {prop1=val1 prop2=val2 ... }\n"
  exit 1
fi
