Installation Instructions
*************************

terraform/
├── bin/
│   └── terraform
├── dist/
│   └── terraform.jar
├── conf/
│   ├── log4j.properties
│   ├── ippool.conf
│   ├── dhcpd.conf
│   ├── dhcpd.conf.temp
│   ├── interfaces
│   ├── interfaces.temp
│   ├── iptables.conf
│   ├── iptables.conf.temp
│   ├── isc-dhcp-server
│   └── isc-dhcp-server.temp
├── lib/
│   └── *.jar
├── LICENSE
└── README


Basic Installation
===================
 	You will find a shell script in terraform/bin. This is used
 to run Terraform. 

How to run terraform: 
 terraform [create/destory] [input-xml-file] [input-credentials-file] [prop1=val1 prop2=val2 ...]

 
	If using any Post Create Actions on an Amazon Web Services instance, include the used 
key-pair (.pem) file(s) from Amazon in ~/.terraform


Credentials
===================



VMware
===================
To create a new vmware template - clones are not in a private network
All vmware templates must include this:

<context
xmlns="com.urbancode.uprovision.tasks.vmware">
    <environment 
    name="terra-env" 
    folder-name="terra-folder">
    </environment>
</context>

To add clones, insert "clone" elements in to the environment element. Clone elements look like this:

<clone instance-name="instance-1"
          order="1"
          image-path="/mydatacenter/myimagefolder/linux-clone-image"
          snapshot-name="my-snapshot"
          server-count="1">
</clone>

Required attributes on a clone element: instance-name(string), order(positive int), image-path(string), snapshot-name(string), user(string), password(string)
If no server count attribute is specified it will default to "1". User and password should be a valid login on the VM. 
The order attribute distinguishes the order VMs will be created - lowest to highest. If clones have the same number they are created in parallel. The order in which they complete can be unpredictable.

Terraform also supports multiple different clone elements - useful if you want them to have different name prefixes or orders in which they are created.

An important note about vSphere images: they should be virtual machines, not templates, with at least one snapshot on them.

For creating a private netowrk, include a network element in the environment for each subnet.

<network network-name="my-net-web" port-count="32"/>

A network element must have a network-name(string) and a port-count(int). This creates a virtual switch and port group.

All cloness on the private network must have a network-ref element pertaining to the proper network, referenced by name.

<network-ref network-name="my-net-web" nic-index="1"/>

The name should be the same as the network name they are on. The nic-index corresponds to the network card which will be on the network.

If you are creating a router to use for the private network, you must use a Linux image that can act as a router.
You must also include these elements on the clone:

<post-create-task/>
<event-listener/>

These elements will configure the networking files on the router. It's highly recommended that the router be created BEFORE any clones that are on its network (specify using the order attribute).
In addition, for any non-router clone on the private network, add this attribute: assign-host-ip="true" . This will tell the clone to get its IP from the router instead of from your DHCP service.

By default, on a private network, all incoming traffic to ports on the network are blocked. You can open ports by adding a security group element to the environment.

<security-group name="default-group">
    <port-range first-port="22" last-port="22"/>
    <port-range first-port="80" last-port="80"/>
    <port-range first-port="3306" last-port="3306"/>
    <port-range first-port="8080" last-port="9090"/>
</security-group>

This security group will open ports 22, 80, 3306, and 8080-9090 on any instance that references this security group. To reference a security group on a clone, add this element to the clone:

<security-group-ref name="default-group"/>

The name should be equal to the security group name. This feature only works if you have a router in your template.

Finally, an example template with a private network, an application server, and a database server:

<?xml version="1.0" encoding="UTF-8"?>
<context
xmlns="com.urbancode.uprovision.tasks.vmware">
    <environment 
    name="terra-env" 
    folder-name="terra-folder">
        
        <network network-name="my-net-web" port-count="32"/>
        <security-group name="default-group">
            <port-range first-port="22" last-port="22"/>
            <port-range first-port="80" last-port="80"/>
            <port-range first-port="3306" last-port="3306"/>
            <port-range first-port="8080" last-port="9090"/>
        </security-group>
    
        <clone instance-name="router-1"
                  order="1"
                  image-path="/mydatacenter/myimagefolder/router-image"
                  snapshot-name="my-snapshot">
            <network-ref network-name="my-net-web" nic-index="1"/>
            <post-create-task/>
            <event-listener/>
        </clone>
                  
        <clone instance-name="app-instance-1"
                  order="2"
                  image-path="/mydatacenter/myimagefolder/linux-clone-image"
                  snapshot-name="my-snapshot"
                  assign-host-ip="true"
                  server-count="1">
            <security-group-ref name="default-group"/>
            <network-ref network-name="my-net-web" nic-index="0"/>
        </clone>
        
        <clone instance-name="db-instance-1"
                  order="2"
                  image-path="/mydatacenter/myimagefolder/linux-clone-image"
                  snapshot-name="my-snapshot"
                  assign-host-ip="true"
                  server-count="1">
            <security-group-ref name="default-group"/>
            <network-ref network-name="my-net-web" nic-index="0"/>
        </clone>
        
    </environment>
</context>


How to create credentials
A credentials file is a text file ending in a .key suffix. It contains name=value pairs separated by lines.
Example file - creds-example.key

Contents:

type=org.urbancode.terraform.credentials.vmware.CredentialsVmware
name=my.vmware.creds
username=my-vcenter-user
password=my-vcenter-password
url=https://vcenter.mysite.com/sdk

For vmware, the "type", "name", "username", "password", and "url" properties are all mandatory.
Name is just whatever you want to name your credentials. Should not contain spaces.
Username is your vcenter login name.
Password is your vcenter password.
Url is the url pointing to your vcenter server, followed by a /sdk suffix.

Vmware environments have 4 required properties when creating an environment. EC2 environments have none. Here are the four required properties for vmware that must be passed in the command line arguments:

datacenter=my-datacenter
host.name=my-host.mysite.com
destination=path/to/my-destination/folder
datastore=my-datastore

These correspond to the vSphere datacenter name, the name of the host the VMs will be created on, the destination folder for the environment folder, and the datastore for the VMs.

Example command line call to Terraform:

./terraform.sh create vmware-template.xml vmware-1.key datacenter=my-datacenter host.name=my-host.mysite.com datastore=my-datastore destination=path/to/my-destination/folder

To destroy an instance:

Call terraform.sh with the following arguments:
First argument: destroy
Second argument: the xml instance file generated when you created your instance (NOT the original template)
Third argument: the credentials file

No properties are required to destroy an instance.
Example command line call to Terraform:

./terraform.sh destroy terra-env-1234.xml vmware-1.key

This will power down the VMs, delete them, delete the folder that Terraform created, and delete any virtual switches it created.



Amazon Web Services 
===================
  -----------
  Credentials
  -----------
  You will need to create a credentials file with information from
  your Amazon Web Services account. There is a template file in 
  example-config/credentials-templates/aws.creds.template.key
  
  You will need to replace the access.key and secret.key with the
  access key and secret key associated with your AWS account. You
  can find this information at : 
        https://portal.aws.amazon.com/gp/aws/securityCredentials
  access.key = Access Key ID
  secret.key = Secret Access Key

  -----------
  Templates
  -----------
    The following is a list of elements available in the xml:

    context: The context holds the whole environment. It has one attribute, xmlns, 
      which specified which package to look in for the map of element name to 
      classname. The package it points to should contain a properties file named:
      terralib.classes 
	for VMware use: xmlns="com.urbancode.uprovision.tasks.vmware"
	for AWS use: xmlns="com.urbancode.uprovision.tasks.aws"

    environment: The environment contains the Virtual Private Cloud (only 1 
      VPC per environment). The name of the environment is used as a prefix 
      on the name tags in AWS.

    vpc: This is the core network. It is made with a CIDR (x.x.x.x/y). 
      For more information on CIDR notation, see: 
  	http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing

    subnet: Subnets are smaller networks inside of the VPC. They each have their
      own CIDR which is a sub-set of the VPC's CDIR. Each subnet has a zone property
      which specifies a region that the subnet will be located in. If any instances
      in this subnet need to be behind an Elastic Load Balancer, the zone of this
      subnet must match that of the load balancer.
      
    inet-gwy: The Internet Gateway attaches to a VPC and allows internet access
      from inside the VPC.

    route-table: Each VPC has a "Main" route table that cannot be deleted
    route:

    vpc-security-group:
    rule:

    instance:

    security-group-ref:
    
    boot-actions:
    script:
    param:
    
    post-create-actions:
    ssh:

    load-balancer:
    lister:

    health-check:

  -----------
  Other Notes
  -----------
	Check the example AWS template in the example-config/xml-templates
for more information on creating templates.

	In order for any Post Create Actions to run on an Amazon EC2 
instance, the instance must have an Elastic Ip Address assigned 
to it. You must also have the key-pair (ssh key) that the instance 
was created with in your ~/.terraform directory. 
	The Elastic Ip Address is neccessary since the instances are 
launched inside of a Virtual Private Cloud. The EIP allows you to 
communicate with those instances from outside of the VPC.
File Information
	The key-pair file is needed for connecting to the server. You
must also know what user that key-pair was associated with. This is 
determined when the AMI (Amazon Machine Image) is created. 



Conf File Information
===================

 [  Global  ]


 * log4j.properties
  This file contains the properties used to configure logging. 
 ____________
 
 
 [   AWS    ]
 ____________
 
 
 [  VMware  ]
 
 * .temp files - these are the beginning forms of the conf files listed below. Content is added to them and placed in the appropriate conf file.
 
 * ippool.conf
  Contains the start and end points for the IP pool used by vcenter.
 The start is the begining IP address to start allocating for VMs.
 It should be in the following format:
   start=192.168.2.1
   end=192.168.2.250
 
 
 * dhcpd.conf
 This is the standard DHCPD configuration file for dhcpd, the Internet Systems Consortium DHCP Server.
 
 See http://linux.die.net/man/5/dhcpd.conf
 
 * interfaces
 This is a debian/ubuntu networking configuration file for the interfaces on the router machine.
 
 See http://support.arpnetworks.com/kb/vps/example-etcnetworkinterfaces-for-debian-and-ubuntu
 
 * iptables.conf
 
 This is the standard iptables configuration file for configuring a firewall and allowable network traffic.
 
 See http://linux.die.net/man/8/iptables
 
 * isc-dhcp-server
 
 This file indicates which network interfaces will be serving up DHCP addresses. It is typically located in /etc/default and referenced by /etc/init.d/isc-dhcp-server .
 The only required content of this file is one line, as below
 INTERFACES="eth1 eth2"
 Quotation marks included. All network interfaces to be served DHCP addresses should be listed, separated by one space.
 
 ____________
  

===================
